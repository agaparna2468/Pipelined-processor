library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Memory is
    port(clock, mem_rd, mem_wr: in std_logic; mem_add,mem_data: in std_logic_vector(15 downto 0);  mem_out: out std_logic_vector(15 downto 0) );
end entity;

architecture mem of Memory is
    
    type mem_array is array(0 to 25) of std_logic_vector(15 downto 0);
	signal outp: std_logic_vector(15 downto 0):="0000000000000000";
    signal RdWr: mem_array:= (
           0=>"0000000001010000",    --r0+r1 stored in r2 add
               1=>"0000000101010010",    --r0+r5 stored in r2 adc 
            2=>"0000000101010001",    --r0+r5 stored in r2 adz
            3=>"0001000001000101",    --r0+5 stored in r1 addition
            4=>"0010010011100000",    --r2 nand r3 stored in r4 ndu
            5=>"0010001011100010",     --r2 nand r3 stored in r4 ndc
            6=>"0010010011100001",     -- r2 nand r3 stored in r4 ndz
            7=>"0011001000000110",     --6 in r1 lhi (Load 0000001100000000 in r1)
            8=>"0100001010001000",     --Load from address given by r2+8 in r1
            9=>"0101010100000111",     --Store in address given by r4+7 data of r2 
            10=>"0111011010100101",    --LM from corresponding address in r3
            11=>"0111001011010101",    --SM to corresponding address in r1  
            12=>"1100001010000101",    --if value in R1=R2  and branch to add PC+ 5   
            13=>"1000001010000100",    --store PC in R1 and branch to add PC+4     
            14=>"1001000010000000",    --store PC in R0 and branch to add in R2 
            others=>(others=>'0')   
            );
begin
    mem_prc: process(clock, mem_add, mem_rd, mem_wr, RdWr,outp)
    
	 begin
			outp<="0000000000000000";
        if (clock'event and clock='0') then
            if(mem_wr='1') then
                RdWr(to_integer(unsigned(mem_add)))<=mem_data;
            end if;
        end if;
        if(mem_rd='1') then
            if(unsigned(mem_add)<=14) then
                outp<=RdWr(to_integer(unsigned(mem_add)));
            else
                outp<= (others=>'0');
				end if;
        end if;
        mem_out<=outp;
    end process;
end mem;