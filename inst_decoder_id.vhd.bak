library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity inst_decoder_id is
    port(inst: in std_logic_vector(15 downto 0); 
	 mem_data_wr, mem_data_rd, RF_wr, SE9_en, SE6_en, Os_en, Az9, C_en, Z_en, Mux1, Mux2, PC_en: out std_logic;
	 ALU1_INST: out std_logic_vector(1 downto 0));
end entity inst_decoder_id;

architecture id of inst_decoder_id is
    
    type mem_array is array(0 to 25) of std_logic_vector(15 downto 0);
	 signal outp: std_logic_vector(15 downto 0):="0000000000000000";
    signal RdWr: mem_array:= (
            0=>"0001000001010000",    --r0+r1 stored in r2 ada
            1=>"0001000101010010",    --r0+r5 stored in r2 adc 
            2=>"0001000101010001",    --r0+r5 stored in r2 adz
            3=>"0001000001011011",    --r0+r1 stored in r3 awc
				4=>"0001000001010100",    --r0+ complement r1 stored in r2 aca 
            5=>"0001000101010110",    --r0+ complement r5 stored in r2 acc 
            6=>"0001000101010101",    --r0+ complement r5 stored in r2 acz
            7=>"0001000001011111",    --r0+ complement r1 stored in r3 acw
				8=>"0000000001000010",    --r0+2 stored in r1 adi
				9=>"0010000001010000",    --r0 nand r1 stored in r2 ndu
            10=>"0010000101010010",    --r0 nand r5 stored in r2 ndc 
            11=>"0010000101010001",    --r0 nand r5 stored in r2 ndz
            12=>"0010000001010100",    --r0 nand complement r1 stored in r2 ncu
            13=>"0010000101010110",    --r0 nand complement r5 stored in r2 ncc 
            14=>"0010000101010101",    --r0 nand complement r5 stored in r2 ncz
            15=>"0011001000000110",     --6 in r1 lli (Load 0000000000000110in r1)
            16=>"0100001010001000",     --Load (lw)from address given by r2+8 in r1
            17=>"0101010100000111",     --Store(sw) in address given by r4+7 data of r2 
            18=>"0110011010100101",    --LM from corresponding address in r3,updating r0,r2,5,7
            19=>"0111011010100101",    --SM to corresponding address in r3,using r0,r2,5,7
            20=>"1000001010000101",    --beq if value in R1=R2  and branch to add PC+ 5*2 
				21=>"1001001010000101",    --blt if value in R1<R2  and branch to add PC+ 5*2 
				22=>"1011001010000101",    --ble if value in R1<=R2  and branch to add PC+ 5*2
				
            23=>"1100001010000100",    --(JAL)store PC+2 in R1 and branch to add PC+4*2     
            24=>"1101000010000000",    --(jlr)store PC+2 in R0 and branch to add in R2 
				25=>"1111000000000011",    -- (jri) branch to ro+3*2
            
            
            others=>(others=>'0')   
            );
begin
    mem_prc: process(clock, mem_add, mem_rd, mem_wr, RdWr,outp)
    
	 begin
			outp<="0000000000000000";
        if (clock'event and clock='0') then
            if(mem_wr='1') then
                RdWr(to_integer(unsigned(mem_add)))<=mem_data;
            end if;
        end if;
        if(mem_rd='1') then
            if(unsigned(mem_add)<=14) then
                outp<=RdWr(to_integer(unsigned(mem_add)));
            else
                outp<= (others=>'0');
				end if;
        end if;
        mem_out<=outp;
    end process;
end id;